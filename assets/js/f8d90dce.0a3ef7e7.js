"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2429],{11659:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var a=t(87462),i=(t(67294),t(3905));const s={id:"vplugin-interface",title:"VPlugin interface",sidebar_label:"VPlugin interface",description:"The interface that the plugin needs to implement",sidebar_position:2},r=void 0,l={unversionedId:"wallet/vplugin/vplugin-interface",id:"wallet/vplugin/vplugin-interface",title:"VPlugin interface",description:"The interface that the plugin needs to implement",source:"@site/docs/wallet/vplugin/vplugin-interface.mdx",sourceDirName:"wallet/vplugin",slug:"/wallet/vplugin/vplugin-interface",permalink:"/docs/wallet/vplugin/vplugin-interface",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"vplugin-interface",title:"VPlugin interface",sidebar_label:"VPlugin interface",description:"The interface that the plugin needs to implement",sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Usage",permalink:"/docs/wallet/vplugin/vplugin-setup"},next:{title:"Introduction",permalink:"/docs/gamelaunch/valkyrie-operator-api"}},o={},p=[],u={toc:p};function c(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"vplugin.PAM")," is the plugin interface you need to implement."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"package vplugin\n\ntype PluginControl interface {\n    // Init passes configuration to plugins which are expected to report\n    // any startup issues as errors.\n    Init(PluginInitConfig) error\n}\n\n// PamClient Interface describing available PAM operations. The implementing plugins\n// are expected to fulfill this interface.\ntype PAM interface {\n    // GetSession Return session\n    GetSession(pam.GetSessionRequest) *pam.SessionResponse\n    // RefreshSession returns a new session token\n    RefreshSession(pam.RefreshSessionRequest) *pam.SessionResponse\n    // GetBalance get balance from PAM\n    GetBalance(pam.GetBalanceRequest) *pam.BalanceResponse\n    // GetTransactions get transactions from pam\n    GetTransactions(pam.GetTransactionsRequest) *pam.GetTransactionsResponse\n    // AddTransaction returns transactionId and balance. When transaction fails balance\n    // can still be returned. On failure error will be returned\n    AddTransaction(pam.AddTransactionRequest) *pam.AddTransactionResponse\n    // GetGameRound gets gameRound from PAM\n    GetGameRound(pam.GetGameRoundRequest) *pam.GameRoundResponse\n\n    PluginControl\n}\n")))}c.isMDXComponent=!0}}]);