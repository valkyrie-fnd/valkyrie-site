"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5843],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(r),f=i,g=d["".concat(c,".").concat(f)]||d[f]||u[f]||o;return r?n.createElement(g,a(a({ref:t},p),{},{components:r})):n.createElement(g,a({ref:t},p))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=r[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},70091:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=r(87462),i=(r(67294),r(3905));const o={title:"Configuration",description:"Configuration specification when launching Valkyrie",sidebar_position:1},a=void 0,l={unversionedId:"get-started/configuration",id:"get-started/configuration",title:"Configuration",description:"Configuration specification when launching Valkyrie",source:"@site/docs/get-started/configuration.md",sourceDirName:"get-started",slug:"/get-started/configuration",permalink:"/docs/get-started/configuration",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Configuration",description:"Configuration specification when launching Valkyrie",sidebar_position:1},sidebar:"sidebar",previous:{title:"Introduction",permalink:"/docs/get-started/introduction"},next:{title:"Logging and tracing",permalink:"/docs/get-started/logging-and-tracing"}},c={},s=[{value:"Valkyrie Config",id:"valkyrie-config",level:2}],p={toc:s};function u(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"valkyrie-config"},"Valkyrie Config"),(0,i.kt)("p",null,"Supply a yaml config file when running Valkyrie. It contains config for logging and tracing as well as provider specific configuration. It's possible to add environment variables within ",(0,i.kt)("inlineCode",{parentName:"p"},"${}"),", which will be replaced before the yaml is processed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"logging:\n  level: info # debug, info, warn, error, fatal, panic\ntracing:\n  type: jaeger # stdout, jaeger, googleCloudTrace\n  url: 'http://traces-url'\n  service_name: valkyrie\n  google_project_id: ${TRACING_GOOGLE_PROJECT_ID} # if you're using googleCloudTrace\npam: # Player Account Management\n  name: generic\n  api_key: pam-api-key\n  url: 'https://pam-url'\nproviders:\n  - name: providerName\n    url: 'http://localhost:3000'\n    auth: # Different providers use different auth. Add what is needed for the specific Providers\n      api_key: 123\nhttp_server: # optional http server configuration\n  read_timeout: 1s\n  write_timeout: 1s\n  idle_timeout: 30s\n  provider_address: localhost:8083 # Base url exposed toward providers\n  operator_address: localhost:8084 # Used by operator to trigger gamelaunch\nhttp_client: # optional http client configuration\n  read_timeout: 1s\n  write_timeout: 1s\n  idle_timeout: 30s\n  request_timeout: 1s\n")),(0,i.kt)("p",null,"For a full list of available providers please look ",(0,i.kt)("a",{parentName:"p",href:"/providers"},"here"),". Each provider specifies what configuration is needed."))}u.isMDXComponent=!0}}]);