"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5843],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(r),f=o,m=d["".concat(s,".").concat(f)]||d[f]||u[f]||a;return r?n.createElement(m,i(i({ref:t},c),{},{components:r})):n.createElement(m,i({ref:t},c))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},70091:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var n=r(87462),o=(r(67294),r(3905));const a={title:"Configuration",description:"Configuration specification when launching Valkyrie",sidebar_position:1},i=void 0,l={unversionedId:"get-started/configuration",id:"get-started/configuration",title:"Configuration",description:"Configuration specification when launching Valkyrie",source:"@site/docs/get-started/configuration.md",sourceDirName:"get-started",slug:"/get-started/configuration",permalink:"/docs/get-started/configuration",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Configuration",description:"Configuration specification when launching Valkyrie",sidebar_position:1},sidebar:"sidebar",previous:{title:"Quickstart",permalink:"/docs/get-started/quickstart"},next:{title:"Telemetry",permalink:"/docs/get-started/telemetry"}},s={},p=[{value:"Valkyrie Config",id:"valkyrie-config",level:2}],c={toc:p};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"valkyrie-config"},"Valkyrie Config"),(0,o.kt)("p",null,"Valkyrie is configured by supplying a yaml config file as a command line argument. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./valkyrie -config path/to/config.yml\n")),(0,o.kt)("p",null,"The configuration file contains all necessary configuration for Valkyrie, including: "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Provider configuration"),(0,o.kt)("li",{parentName:"ul"},"PAM configuration"),(0,o.kt)("li",{parentName:"ul"},"Logging"),(0,o.kt)("li",{parentName:"ul"},"Telemetry"),(0,o.kt)("li",{parentName:"ul"},"HTTP Server and Client")),(0,o.kt)("p",null,"It's possible to add environment variables within ",(0,o.kt)("inlineCode",{parentName:"p"},"${}"),", which will be replaced before the yaml is processed.\nFor example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'pam:\n  name: generic\n  api_key: "${PAM_API_TOKEN}"\n')),(0,o.kt)("p",null,"A full reference of the supported configuration is listed below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'logging:\n  level: info # trace, debug, info, warn, error, fatal, panic (info being default)\n  async: # Optional async configuration (enabled by default, with default values)\n    enabled: true\n    buffer_size: 500000 # Log buffer will be emptied when full to avoid blocking producers\n    poll_interval: 5ms # Time duration between the log writer polling for new events\n  output:\n    type: stdout # Supported types: stdout, stderr, file\n    # for type=file, the following config is available:\n    # filename: /var/log/valkyrie.log # is the file to write logs to\n    # max_size: 100                   # the maximum size in megabytes of the log file before it gets rotated\n    # max_age: 28                     # the maximum number of days to retain old log files based on the\n    #                                 # timestamp encoded in their filename\n    # max_backups: 3                  # the maximum number of old log files to retain\n    # compress: false                 # determines if the rotated log files should be compressed using gzip\ntelemetry:\n  service_name: serviceName # adds name metadata to tracing and metric telemetry\n  namespace: namespace      # adds namespace metadata to tracing and metric telemetry\n  tracing:\n    type: stdout                        # supported: stdout, otlptracehttp\n    # url: "https://tracing-server-url" # optional, otlphttptrace will default to "http://localhost:4318/v1/traces"\n    # google_project_id: xyz            # optional, applicable if you\'re using google cloud\n    # sample_ratio: 0.01                # optional, default samples 1% of traces\n  metric:\n    type: stdout                       # supported: stdout, otlpmetrichttp\n    # url: "https://metric-server-url" # optional, otlpmetrichttp will default to "http://localhost:4318/v1/metrics"\npam: # Player Account Management\n  name: generic\n  api_key: pam-api-key\n  url: \'https://pam-url\'\nprovider_base_path: "/providers" # Optional field to set a base path to all requests incoming from provider side, ie wallet calls\noperator_base_path: "/operator" # Optional field to set a base path to all requests incoming from operator side\noperator_api_key: "token" # Optional, configures an api key used to authorize requests to operator endpoints (using `Authorization: Bearer token` header)\nproviders:\n  - name: providerName\n    base_path: "/providername" # base path for the providers. Used to differentiate between Valkyrie\'s exposed endpoints for the specific providers.\n    url: \'http://localhost:3000\'\n    auth: # Different providers use different auth. Add what is needed for the specific Providers\n      api_key: 123\nhttp_server: # optional http server configuration\n  read_timeout: 1s\n  write_timeout: 1s\n  idle_timeout: 30s\n  provider_address: localhost:8083 # Base url exposed toward providers\n  operator_address: localhost:8084 # Used by operator to trigger gamelaunch\nhttp_client: # optional http client configuration\n  read_timeout: 1s\n  write_timeout: 1s\n  idle_timeout: 30s\n  request_timeout: 1s\n')),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Different providers and PAMs (Wallets) may require additional custom configuration to be provided."),(0,o.kt)("p",{parentName:"admonition"},"For a full list of available providers please refer to the ",(0,o.kt)("a",{parentName:"p",href:"/providers"},"providers section"),".\nSimilarly, for PAMs please refer to the Wallet section.")))}u.isMDXComponent=!0}}]);