"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2884],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=s(n),u=a,g=d["".concat(p,".").concat(u)]||d[u]||m[u]||l;return n?r.createElement(g,o(o({ref:t},c),{},{components:n})):r.createElement(g,o({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var s=2;s<l;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},83099:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const l={title:"Operations",sidebar_position:2},o=void 0,i={unversionedId:"get-started/operations",id:"get-started/operations",title:"Operations",description:"Logging",source:"@site/docs/get-started/operations.md",sourceDirName:"get-started",slug:"/get-started/operations",permalink:"/docs/get-started/operations",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Operations",sidebar_position:2},sidebar:"sidebar",previous:{title:"Configuration",permalink:"/docs/get-started/configuration"},next:{title:"Docker",permalink:"/docs/get-started/docker"}},p={},s=[{value:"Logging",id:"logging",level:2},{value:"Telemetry",id:"telemetry",level:2},{value:"Tracing",id:"tracing",level:3},{value:"Running locally with OpenTelemetry Collector and Jaeger for tracing",id:"running-locally-with-opentelemetry-collector-and-jaeger-for-tracing",level:4},{value:"Metrics",id:"metrics",level:3},{value:"Running locally with OpenTelemetry Collector and Prometheus for metrics",id:"running-locally-with-opentelemetry-collector-and-prometheus-for-metrics",level:4},{value:"Profiling",id:"profiling",level:2},{value:"Operating",id:"operating",level:2},{value:"Running",id:"running",level:3},{value:"systemd",id:"systemd",level:4},{value:"Network",id:"network",level:3},{value:"Scaling",id:"scaling",level:3},{value:"Security",id:"security",level:3}],c={toc:s};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"logging"},"Logging"),(0,a.kt)("p",null,"Valkyrie has extensive support for logging and integrates well with standard log aggregation systems."),(0,a.kt)("p",null,"Features:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Structured logging in JSON format"),(0,a.kt)("li",{parentName:"ul"},"HTTP request/response logging for ",(0,a.kt)("inlineCode",{parentName:"li"},"debug")," level"),(0,a.kt)("li",{parentName:"ul"},"Trace information (",(0,a.kt)("inlineCode",{parentName:"li"},"traceparent"),") attached to log entries if available"),(0,a.kt)("li",{parentName:"ul"},"Asynchronous log writer for low latency footprint"),(0,a.kt)("li",{parentName:"ul"},"Rotation and compression of log files")),(0,a.kt)("p",null,"Logging is configured in Valkyrie's standard config file and supports the following options:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"logging:\n  level: debug # trace, debug, info, warn, error, fatal, panic (info being default)\n  async: # Optional async configuration (enabled by default, with default values)\n    enabled: true\n    buffer_size: 500000 # Log buffer will be emptied when full to avoid blocking producers\n    poll_interval: 5ms # Time duration between the log writer polling for new events\n  output:\n    type: stdout # Supported types: stdout, stderr, file\n    # for type=file, the following config is available:\n    # filename: /var/log/valkyrie.log # is the file to write logs to\n    # max_size: 100                   # the maximum size in megabytes of the log file before it gets rotated\n    # max_age: 28                     # the maximum number of days to retain old log files based on the\n    #                                 # timestamp encoded in their filename\n    # max_backups: 3                  # the maximum number of old log files to retain\n    # compress: false                 # determines if the rotated log files should be compressed using gzip\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Configuring Valkyrie with logging level ",(0,a.kt)("inlineCode",{parentName:"p"},"trace")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"debug")," will produce very verbose logs and should be avoided\nin production environments.")),(0,a.kt)("p",null,"Providers may also support some form of tracing identifier, which is mapped to a field called ",(0,a.kt)("inlineCode",{parentName:"p"},"correlationID")," by\nValkyrie and propagated using HTTP header ",(0,a.kt)("inlineCode",{parentName:"p"},"X-Correlation-ID")," as part of its standard PAM API."),(0,a.kt)("h2",{id:"telemetry"},"Telemetry"),(0,a.kt)("p",null,"Valkyrie uses ",(0,a.kt)("a",{parentName:"p",href:"https://opentelemetry.io/docs/concepts/what-is-opentelemetry/"},"OpenTelemetry")," for all its telemetry\nneeds, which allows for easy integration with most standard observability backends."),(0,a.kt)("h3",{id:"tracing"},"Tracing"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Supported tracing exporters"),(0,a.kt)("th",{parentName:"tr",align:null},"Docs"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://opentelemetry.io/docs/collector/"},"OpenTelemetry Collector")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://github.com/open-telemetry/opentelemetry-collector-contrib"},"github"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"StdOut"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://github.com/open-telemetry/opentelemetry-go/tree/main/exporters/stdout"},"github"))))),(0,a.kt)("p",null,"Tracing is configured in Valkyrie's standard config file under ",(0,a.kt)("inlineCode",{parentName:"p"},"telemetry")," and supports the following options: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'telemetry:\n  tracing:\n    type: otlphttptrace                             # supported: stdout, otlptracehttp\n    url: "http://traces-url"                        # optional, otlphttptrace will default to "http://localhost:4318/v1/traces"\n    google_project_id: ${TRACING_GOOGLE_PROJECT_ID} # optional, applicable if you\'re using google cloud\n    sample_ratio: 0.1                               # optional, default samples 1% of traces\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"otlphttptrace")," configures exporting over ",(0,a.kt)("a",{parentName:"li",href:"https://opentelemetry.io/docs/reference/specification/protocol/"},"OLTP/HTTP")," to an OpenTelemetry Collector"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"stdout")," configures printing of traces to standard out")),(0,a.kt)("p",null,"OpenTelemetry Collector can then be configured with the following ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter"},"exporters"),"."),(0,a.kt)("h4",{id:"running-locally-with-opentelemetry-collector-and-jaeger-for-tracing"},"Running locally with OpenTelemetry Collector and Jaeger for tracing"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Valkyrie provides a sample ",(0,a.kt)("inlineCode",{parentName:"li"},"docker-compose-local.yaml")," for starting a local OpenTelemetry Collector and Jaeger: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/valkyrie-fnd/valkyrie/tree/main/ops/otel"},"https://github.com/valkyrie-fnd/valkyrie/tree/main/ops/otel")),(0,a.kt)("li",{parentName:"ol"},"Start Valkyrie locally and configure trace exporting with ",(0,a.kt)("inlineCode",{parentName:"li"},"otlphttptrace"),":",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"telemetry:\n  service_name: sample-valkyrie\n  tracing:\n    type: otlphttptrace\n    sample_ratio: 1.0\n")),"The exporter will by default send traces to OpenTelemetry Collector on ",(0,a.kt)("inlineCode",{parentName:"li"},"http://localhost:4318/v1/traces")," that is running in docker."),(0,a.kt)("li",{parentName:"ol"},"Trigger a traced wallet call and inspect it in Jaeger on ",(0,a.kt)("inlineCode",{parentName:"li"},"http://localhost:16686"))),(0,a.kt)("h3",{id:"metrics"},"Metrics"),(0,a.kt)("p",null,"Simple application metrics are available at http://localhost:8084/monitoring/metrics and contains:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"CPU usage"),(0,a.kt)("li",{parentName:"ul"},"Memory usage"),(0,a.kt)("li",{parentName:"ul"},"Response time"),(0,a.kt)("li",{parentName:"ul"},"Open connections")),(0,a.kt)("p",null,"More advanced metrics (including above) can be exported by Valkyrie. This includes metrics for:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"HTTP server"),(0,a.kt)("li",{parentName:"ul"},"GC statistics"),(0,a.kt)("li",{parentName:"ul"},"Memory statistics"),(0,a.kt)("li",{parentName:"ul"},"Uptime")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Supported metric exporters"),(0,a.kt)("th",{parentName:"tr",align:null},"Docs"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://opentelemetry.io/docs/collector/"},"OpenTelemetry Collector")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://github.com/open-telemetry/opentelemetry-collector-contrib"},"github"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"StdOut"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://github.com/open-telemetry/opentelemetry-go/tree/main/exporters/stdout"},"github"))))),(0,a.kt)("p",null,"Metrics are configured in Valkyrie's standard config file under ",(0,a.kt)("inlineCode",{parentName:"p"},"telemetry")," and supports the following options:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'telemetry:\n  metric:\n    type: otlpmetrichttp      # supported: stdout, otlpmetrichttp\n    url: "http://metrics-url" # optional, otlpmetrichttp will default to "http://localhost:4318/v1/metrics"\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"otlpmetrichttp")," configures exporting over ",(0,a.kt)("a",{parentName:"li",href:"https://opentelemetry.io/docs/reference/specification/protocol/"},"OLTP/HTTP")," to an OpenTelemetry Collector"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"stdout")," configures printing of metrics to standard out")),(0,a.kt)("h4",{id:"running-locally-with-opentelemetry-collector-and-prometheus-for-metrics"},"Running locally with OpenTelemetry Collector and Prometheus for metrics"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Valkyrie provides a sample ",(0,a.kt)("inlineCode",{parentName:"li"},"docker-compose-local.yaml")," for starting a local OpenTelemetry Collector and Prometheus: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/valkyrie-fnd/valkyrie/tree/main/ops/otel"},"https://github.com/valkyrie-fnd/valkyrie/tree/main/ops/otel")),(0,a.kt)("li",{parentName:"ol"},"Start Valkyrie locally and configure metric exporting with ",(0,a.kt)("inlineCode",{parentName:"li"},"otlpmetrichttp"),":",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"telemetry:\n  service_name: sample-valkyrie\n  metric:\n    type: otlpmetrichttp\n")),"The exporter will by default send metrics to OpenTelemetry Collector on ",(0,a.kt)("inlineCode",{parentName:"li"},"http://localhost:4318/v1/metrics")," that is running in docker."),(0,a.kt)("li",{parentName:"ol"},"Inspect the metrics in Prometheus on ",(0,a.kt)("inlineCode",{parentName:"li"},"http://localhost:9090"))),(0,a.kt)("h2",{id:"profiling"},"Profiling"),(0,a.kt)("p",null,"To enable the profiling endpoint set the env variable ",(0,a.kt)("inlineCode",{parentName:"p"},"PPROF=true")," and use the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/google/pprof"},"pprof tool"),"\nto extract runtime data:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"go tool pprof 'localhost:8084/debug/pprof/profile?seconds=25'\n")),(0,a.kt)("h2",{id:"operating"},"Operating"),(0,a.kt)("p",null,"This section provides information for operating Valkyrie in a production environment."),(0,a.kt)("h3",{id:"running"},"Running"),(0,a.kt)("p",null,"Valkyrie support several ways of running the application:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Kubernetes: use the provided ",(0,a.kt)("a",{parentName:"li",href:"helm"},"Helm chart"),"."),(0,a.kt)("li",{parentName:"ul"},"Docker: use the official ",(0,a.kt)("a",{parentName:"li",href:"docker"},"Docker image"),"."),(0,a.kt)("li",{parentName:"ul"},"Other: use one of the prebuilt binary releases on ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/valkyrie-fnd/valkyrie/releases"},"GitHub"))),(0,a.kt)("h4",{id:"systemd"},"systemd"),(0,a.kt)("p",null,"Valkyrie binary releases for Linux also includes systemd script ",(0,a.kt)("inlineCode",{parentName:"p"},"svc.sh")," for installing the application\nas a systemd service. For a list of available commands run ",(0,a.kt)("inlineCode",{parentName:"p"},"./svc.sh"),"."),(0,a.kt)("h3",{id:"network"},"Network"),(0,a.kt)("p",null,"Valkyrie will accept HTTP traffic on two ports, typically these ports are mapped to ",(0,a.kt)("inlineCode",{parentName:"p"},"8083")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"8084"),", but they can\nalso be configured."),(0,a.kt)("p",null,"Outgoing traffic from Valkyrie is also HTTP-based and varies depending on which providers are used."),(0,a.kt)("p",null,"SSL termination and load balancing concerns should be implemented outside the application through standard\ninfrastructure components."),(0,a.kt)("p",null,"Valkyrie provides an HTTP endpoint ",(0,a.kt)("inlineCode",{parentName:"p"},"GET /ping"),", which can be used for load balancer monitoring etc."),(0,a.kt)("h3",{id:"scaling"},"Scaling"),(0,a.kt)("p",null,"Valkyrie is built as a stateless component and is scalable both horizontally by running many instances of the\napplication, and vertically by being able to efficiently utilize the cores available on the host system."),(0,a.kt)("h3",{id:"security"},"Security"),(0,a.kt)("p",null,"Valkyrie supports API key authorization on both operator and provider ports (depending on the provider implementation)."),(0,a.kt)("p",null,"To further control network access to and from Valkyrie, IP-restrictions and private networking may also\nbe used."))}m.isMDXComponent=!0}}]);