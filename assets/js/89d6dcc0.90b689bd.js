"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5245],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var n=r(67294);function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){l(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,l=function(e,t){if(null==e)return{};var r,n,l={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(l[r]=e[r]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(l[r]=e[r])}return l}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,l=e.mdxType,a=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=s(r),d=l,g=u["".concat(p,".").concat(d)]||u[d]||m[d]||a;return r?n.createElement(g,o(o({ref:t},c),{},{components:r})):n.createElement(g,o({ref:t},c))}));function d(e,t){var r=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=r.length,o=new Array(a);o[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:l,o[1]=i;for(var s=2;s<a;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},73301:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var n=r(87462),l=(r(67294),r(3905));const a={title:"Telemetry",sidebar_position:2},o="Telemetry",i={unversionedId:"get-started/telemetry",id:"get-started/telemetry",title:"Telemetry",description:"Valkyrie uses OpenTelemetry for its telemetry",source:"@site/docs/get-started/telemetry.md",sourceDirName:"get-started",slug:"/get-started/telemetry",permalink:"/docs/get-started/telemetry",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Telemetry",sidebar_position:2},sidebar:"sidebar",previous:{title:"Configuration",permalink:"/docs/get-started/configuration"},next:{title:"Operations",permalink:"/docs/get-started/operations"}},p={},s=[{value:"Logging",id:"logging",level:2},{value:"Tracing",id:"tracing",level:2},{value:"Running locally with OpenTelemetry Collector and Jaeger for tracing",id:"running-locally-with-opentelemetry-collector-and-jaeger-for-tracing",level:3},{value:"Metrics",id:"metrics",level:2},{value:"Running locally with OpenTelemetry Collector and Prometheus for metrics",id:"running-locally-with-opentelemetry-collector-and-prometheus-for-metrics",level:3},{value:"Profiling",id:"profiling",level:2}],c={toc:s};function m(e){let{components:t,...r}=e;return(0,l.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"telemetry"},"Telemetry"),(0,l.kt)("p",null,"Valkyrie uses ",(0,l.kt)("a",{parentName:"p",href:"https://opentelemetry.io/docs/concepts/what-is-opentelemetry/"},"OpenTelemetry")," for its telemetry\nneeds, which allows for easy integration with most standard observability backends."),(0,l.kt)("h2",{id:"logging"},"Logging"),(0,l.kt)("p",null,"Valkyrie has extensive support for logging and integrates well with standard log aggregation systems."),(0,l.kt)("p",null,"Features:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Structured logging in JSON format"),(0,l.kt)("li",{parentName:"ul"},"HTTP request/response logging for ",(0,l.kt)("inlineCode",{parentName:"li"},"debug")," level"),(0,l.kt)("li",{parentName:"ul"},"Trace information (",(0,l.kt)("inlineCode",{parentName:"li"},"traceparent"),") attached to log entries if available"),(0,l.kt)("li",{parentName:"ul"},"Asynchronous log writer for low latency footprint"),(0,l.kt)("li",{parentName:"ul"},"Rotation and compression of log files")),(0,l.kt)("p",null,"Logging is configured in Valkyrie's standard config file and supports the following options:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"logging:\n  level: debug # trace, debug, info, warn, error, fatal, panic (info being default)\n  async: # Optional async configuration (enabled by default, with default values)\n    enabled: true\n    buffer_size: 500000 # Log buffer will be emptied when full to avoid blocking producers\n    poll_interval: 5ms # Time duration between the log writer polling for new events\n  output:\n    type: stdout # Supported types: stdout, stderr, file\n    # for type=file, the following config is available:\n    # filename: /var/log/valkyrie.log # is the file to write logs to\n    # max_size: 100                   # the maximum size in megabytes of the log file before it gets rotated\n    # max_age: 28                     # the maximum number of days to retain old log files based on the\n    #                                 # timestamp encoded in their filename\n    # max_backups: 3                  # the maximum number of old log files to retain\n    # compress: false                 # determines if the rotated log files should be compressed using gzip\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Configuring Valkyrie with logging level ",(0,l.kt)("inlineCode",{parentName:"p"},"trace")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"debug")," will produce very verbose logs and should be avoided\nin production environments.")),(0,l.kt)("p",null,"Providers may also support some form of tracing identifier, which is mapped to a field called ",(0,l.kt)("inlineCode",{parentName:"p"},"correlationID")," by\nValkyrie and propagated using HTTP header ",(0,l.kt)("inlineCode",{parentName:"p"},"X-Correlation-ID")," as part of its standard PAM API."),(0,l.kt)("h2",{id:"tracing"},"Tracing"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Supported tracing exporters"),(0,l.kt)("th",{parentName:"tr",align:null},"Docs"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://opentelemetry.io/docs/collector/"},"OpenTelemetry Collector")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/open-telemetry/opentelemetry-collector-contrib"},"github"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"StdOut"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/open-telemetry/opentelemetry-go/tree/main/exporters/stdout"},"github"))))),(0,l.kt)("p",null,"Tracing is configured in Valkyrie's standard config file under ",(0,l.kt)("inlineCode",{parentName:"p"},"telemetry")," and supports the following options: "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'telemetry:\n  tracing:\n    type: otlphttptrace                             # supported: stdout, otlptracehttp\n    url: "http://traces-url"                        # optional, otlphttptrace will default to "http://localhost:4318/v1/traces"\n    google_project_id: ${TRACING_GOOGLE_PROJECT_ID} # optional, applicable if you\'re using google cloud\n    sample_ratio: 0.1                               # optional, default samples 1% of traces\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"otlphttptrace")," configures exporting over ",(0,l.kt)("a",{parentName:"li",href:"https://opentelemetry.io/docs/reference/specification/protocol/"},"OLTP/HTTP")," to an OpenTelemetry Collector"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"stdout")," configures printing of traces to standard out")),(0,l.kt)("p",null,"OpenTelemetry Collector can then be configured with the following ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter"},"exporters"),"."),(0,l.kt)("h3",{id:"running-locally-with-opentelemetry-collector-and-jaeger-for-tracing"},"Running locally with OpenTelemetry Collector and Jaeger for tracing"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Valkyrie provides a sample ",(0,l.kt)("inlineCode",{parentName:"li"},"docker-compose-local.yaml")," for starting a local OpenTelemetry Collector and Jaeger: ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/valkyrie-fnd/valkyrie/tree/main/ops/otel"},"https://github.com/valkyrie-fnd/valkyrie/tree/main/ops/otel")),(0,l.kt)("li",{parentName:"ol"},"Start Valkyrie locally and configure trace exporting with ",(0,l.kt)("inlineCode",{parentName:"li"},"otlphttptrace"),":",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"telemetry:\n  service_name: sample-valkyrie\n  tracing:\n    type: otlphttptrace\n    sample_ratio: 1.0\n")),"The exporter will by default send traces to OpenTelemetry Collector on ",(0,l.kt)("inlineCode",{parentName:"li"},"http://localhost:4318/v1/traces")," that is running in docker."),(0,l.kt)("li",{parentName:"ol"},"Trigger a traced wallet call and inspect it in Jaeger on ",(0,l.kt)("inlineCode",{parentName:"li"},"http://localhost:16686"))),(0,l.kt)("h2",{id:"metrics"},"Metrics"),(0,l.kt)("p",null,"Simple application metrics are available at http://localhost:8084/monitoring/metrics and contains:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"CPU usage"),(0,l.kt)("li",{parentName:"ul"},"Memory usage"),(0,l.kt)("li",{parentName:"ul"},"Response time"),(0,l.kt)("li",{parentName:"ul"},"Open connections")),(0,l.kt)("p",null,"More advanced metrics (including above) can be exported by Valkyrie. This includes metrics for:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"HTTP server"),(0,l.kt)("li",{parentName:"ul"},"GC statistics"),(0,l.kt)("li",{parentName:"ul"},"Memory statistics"),(0,l.kt)("li",{parentName:"ul"},"Uptime")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Supported metric exporters"),(0,l.kt)("th",{parentName:"tr",align:null},"Docs"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://opentelemetry.io/docs/collector/"},"OpenTelemetry Collector")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/open-telemetry/opentelemetry-collector-contrib"},"github"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"StdOut"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/open-telemetry/opentelemetry-go/tree/main/exporters/stdout"},"github"))))),(0,l.kt)("p",null,"Metrics are configured in Valkyrie's standard config file under ",(0,l.kt)("inlineCode",{parentName:"p"},"telemetry")," and supports the following options:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'telemetry:\n  metric:\n    type: otlpmetrichttp      # supported: stdout, otlpmetrichttp\n    url: "http://metrics-url" # optional, otlpmetrichttp will default to "http://localhost:4318/v1/metrics"\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"otlpmetrichttp")," configures exporting over ",(0,l.kt)("a",{parentName:"li",href:"https://opentelemetry.io/docs/reference/specification/protocol/"},"OLTP/HTTP")," to an OpenTelemetry Collector"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"stdout")," configures printing of metrics to standard out")),(0,l.kt)("h3",{id:"running-locally-with-opentelemetry-collector-and-prometheus-for-metrics"},"Running locally with OpenTelemetry Collector and Prometheus for metrics"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Valkyrie provides a sample ",(0,l.kt)("inlineCode",{parentName:"li"},"docker-compose-local.yaml")," for starting a local OpenTelemetry Collector and Prometheus: ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/valkyrie-fnd/valkyrie/tree/main/ops/otel"},"https://github.com/valkyrie-fnd/valkyrie/tree/main/ops/otel")),(0,l.kt)("li",{parentName:"ol"},"Start Valkyrie locally and configure metric exporting with ",(0,l.kt)("inlineCode",{parentName:"li"},"otlpmetrichttp"),":",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"telemetry:\n  service_name: sample-valkyrie\n  metric:\n    type: otlpmetrichttp\n")),"The exporter will by default send metrics to OpenTelemetry Collector on ",(0,l.kt)("inlineCode",{parentName:"li"},"http://localhost:4318/v1/metrics")," that is running in docker."),(0,l.kt)("li",{parentName:"ol"},"Inspect the metrics in Prometheus on ",(0,l.kt)("inlineCode",{parentName:"li"},"http://localhost:9090"))),(0,l.kt)("h2",{id:"profiling"},"Profiling"),(0,l.kt)("p",null,"To enable the profiling endpoint set the env variable ",(0,l.kt)("inlineCode",{parentName:"p"},"PPROF=true")," and use the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/google/pprof"},"pprof tool"),"\nto extract runtime data:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"go tool pprof 'localhost:8084/debug/pprof/profile?seconds=25'\n")))}m.isMDXComponent=!0}}]);