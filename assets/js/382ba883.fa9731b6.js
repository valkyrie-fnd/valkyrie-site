"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2884],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=s(n),g=a,m=c["".concat(p,".").concat(g)]||c[g]||u[g]||i;return n?r.createElement(m,o(o({ref:t},d),{},{components:n})):r.createElement(m,o({ref:t},d))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},83099:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const i={title:"Operations",sidebar_position:2},o=void 0,l={unversionedId:"get-started/operations",id:"get-started/operations",title:"Operations",description:"Logging",source:"@site/docs/get-started/operations.md",sourceDirName:"get-started",slug:"/get-started/operations",permalink:"/docs/get-started/operations",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Operations",sidebar_position:2},sidebar:"sidebar",previous:{title:"Configuration",permalink:"/docs/get-started/configuration"},next:{title:"Docker",permalink:"/docs/get-started/docker"}},p={},s=[{value:"Logging",id:"logging",level:2},{value:"Telemetry",id:"telemetry",level:2},{value:"Tracing",id:"tracing",level:3},{value:"Running locally with Jaeger for tracing",id:"running-locally-with-jaeger-for-tracing",level:4},{value:"Metrics",id:"metrics",level:3},{value:"Profiling",id:"profiling",level:2},{value:"Operating",id:"operating",level:2},{value:"Running",id:"running",level:3},{value:"systemd",id:"systemd",level:4},{value:"Network",id:"network",level:3},{value:"Scaling",id:"scaling",level:3},{value:"Security",id:"security",level:3}],d={toc:s};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"logging"},"Logging"),(0,a.kt)("p",null,"Valkyrie has extensive support for logging and integrates well with standard log aggregation systems."),(0,a.kt)("p",null,"Features:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Structured logging in JSON format"),(0,a.kt)("li",{parentName:"ul"},"HTTP request/response logging for ",(0,a.kt)("inlineCode",{parentName:"li"},"debug")," level"),(0,a.kt)("li",{parentName:"ul"},"Trace information (",(0,a.kt)("inlineCode",{parentName:"li"},"traceparent"),") attached to log entries if available"),(0,a.kt)("li",{parentName:"ul"},"Asynchronous log writer for low latency footprint"),(0,a.kt)("li",{parentName:"ul"},"Rotation and compression of log files")),(0,a.kt)("p",null,"Logging is configured in Valkyrie's standard config file and supports the following options:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"logging:\n  level: debug # trace, debug, info, warn, error, fatal, panic (info being default)\n  async: # Optional async configuration (enabled by default, with default values)\n    enabled: true\n    buffer_size: 500000 # Log buffer will be emptied when full to avoid blocking producers\n    poll_interval: 5ms # Time duration between the log writer polling for new events\n  output:\n    type: stdout # Supported types: stdout, stderr, file\n    # for type=file, the following config is available:\n    # filename: /var/log/valkyrie.log # is the file to write logs to\n    # max_size: 100                   # the maximum size in megabytes of the log file before it gets rotated\n    # max_age: 28                     # the maximum number of days to retain old log files based on the\n    #                                 # timestamp encoded in their filename\n    # max_backups: 3                  # the maximum number of old log files to retain\n    # compress: false                 # determines if the rotated log files should be compressed using gzip\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Configuring Valkyrie with logging level ",(0,a.kt)("inlineCode",{parentName:"p"},"trace")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"debug")," will produce very verbose logs and should be avoided\nin production environments.")),(0,a.kt)("p",null,"Providers may also support some form of tracing identifier, which is mapped to a field called ",(0,a.kt)("inlineCode",{parentName:"p"},"correlationID")," by\nValkyrie and propagated using HTTP header ",(0,a.kt)("inlineCode",{parentName:"p"},"X-Correlation-ID")," as part of its standard PAM API."),(0,a.kt)("h2",{id:"telemetry"},"Telemetry"),(0,a.kt)("p",null,"Valkyrie uses ",(0,a.kt)("a",{parentName:"p",href:"https://opentelemetry.io/docs/concepts/what-is-opentelemetry/"},"OpenTelemetry")," for all its telemetry\nneeds, which allows for easy integration with most standard observability backends."),(0,a.kt)("h3",{id:"tracing"},"Tracing"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Supported tracing exporters"),(0,a.kt)("th",{parentName:"tr",align:null},"Docs"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://www.jaegertracing.io/"},"Jaeger")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://github.com/open-telemetry/opentelemetry-go/tree/main/exporters/jaeger"},"github"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://cloud.google.com/trace"},"Google Cloud Trace")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://github.com/GoogleCloudPlatform/opentelemetry-operations-go"},"github"))))),(0,a.kt)("p",null,"Tracing is configured in Valkyrie's standard config file and supports the following options: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"tracing:\n  type: jaeger # stdout, jaeger, googleCloudTrace\n  url: 'http://traces-url'\n  service_name: valkyrie\n  google_project_id: ${TRACING_GOOGLE_PROJECT_ID} # if you're using googleCloudTrace\n")),(0,a.kt)("h4",{id:"running-locally-with-jaeger-for-tracing"},"Running locally with Jaeger for tracing"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Start Jaeger in docker",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -d --name jaeger \\\n  -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 \\\n  -p 5775:5775/udp -p 6831:6831/udp -p 6832:6832/udp -p 5778:5778 -p 16686:16686 \\\n  -p 14250:14250 -p 14268:14268 -p 14269:14269 -p 9411:9411 \\\n  jaegertracing/all-in-one:1.35\n"))),(0,a.kt)("li",{parentName:"ol"},"Set environment variables for Valkyrie.",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"TRACING_TYPE=jaeger\nTRACING_URL=http://localhost:14268/api/traces\nTRACING_SERVICE_NAME=valkyrie\n")))),(0,a.kt)("h3",{id:"metrics"},"Metrics"),(0,a.kt)("p",null,"Simple metrics are available at http://localhost:8084/monitoring/metrics."),(0,a.kt)("h2",{id:"profiling"},"Profiling"),(0,a.kt)("p",null,"To enable the profiling endpoint set the env variable ",(0,a.kt)("inlineCode",{parentName:"p"},"PPROF=true")," and use the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/google/pprof"},"pprof tool"),"\nto extract runtime data:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"go tool pprof 'localhost:8084/debug/pprof/profile?seconds=25'\n")),(0,a.kt)("h2",{id:"operating"},"Operating"),(0,a.kt)("p",null,"This section provides information for operating Valkyrie in a production environment."),(0,a.kt)("h3",{id:"running"},"Running"),(0,a.kt)("p",null,"Valkyrie support several ways of running the application:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Kubernetes: use the provided ",(0,a.kt)("a",{parentName:"li",href:"helm"},"Helm chart"),"."),(0,a.kt)("li",{parentName:"ul"},"Docker: use the official ",(0,a.kt)("a",{parentName:"li",href:"docker"},"Docker image"),"."),(0,a.kt)("li",{parentName:"ul"},"Other: use one of the prebuilt binary releases on ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/valkyrie-fnd/valkyrie/releases"},"GitHub"))),(0,a.kt)("h4",{id:"systemd"},"systemd"),(0,a.kt)("p",null,"Valkyrie binary releases for Linux also includes systemd script ",(0,a.kt)("inlineCode",{parentName:"p"},"svc.sh")," for installing the application\nas a systemd service. For a list of available commands run ",(0,a.kt)("inlineCode",{parentName:"p"},"./svc.sh"),"."),(0,a.kt)("h3",{id:"network"},"Network"),(0,a.kt)("p",null,"Valkyrie will accept HTTP traffic on two ports, typically these ports are mapped to ",(0,a.kt)("inlineCode",{parentName:"p"},"8083")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"8084"),", but they can\nalso be configured."),(0,a.kt)("p",null,"Outgoing traffic from Valkyrie is also HTTP-based and varies depending on which providers are used."),(0,a.kt)("p",null,"SSL termination and load balancing concerns should be implemented outside the application through standard\ninfrastructure components."),(0,a.kt)("p",null,"Valkyrie provides an HTTP endpoint ",(0,a.kt)("inlineCode",{parentName:"p"},"GET /ping"),", which can be used for load balancer monitoring etc."),(0,a.kt)("h3",{id:"scaling"},"Scaling"),(0,a.kt)("p",null,"Valkyrie is built as a stateless component and is scalable both horizontally by running many instances of the\napplication, and vertically by being able to efficiently utilize the cores available on the host system."),(0,a.kt)("h3",{id:"security"},"Security"),(0,a.kt)("p",null,"Valkyrie supports API key authorization on both operator and provider ports (depending on the provider implementation)."),(0,a.kt)("p",null,"To further control network access to and from Valkyrie, IP-restrictions and private networking may also\nbe used."))}u.isMDXComponent=!0}}]);